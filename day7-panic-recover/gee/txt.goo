package gee

import (
	"fmt"
	"log"
	"net/http"
	"runtime"
	"strings"
)

func trace(message string) string {
	var pcs [32]uintptr
	n := runtime.Callers(3, pcs[:])

	var str strings.Builder
	str.WriteString(message + "\nTraceback")
	for _, pc := range pcs[:n] {
		fn := runtime.FuncForPC(pc)
		file, line := fn.FileLine(pc)
		str.WriteString(fmt.Sprintf("\n\t%s:%d", file, line))
	}
	return str.String()
}

// 定义了一个用于错误恢复的中间件 Recovery
func Recovery() HandlerFunc {
	return func(c *Context) {
		defer func() {
			if err := recover(); err != nil {
				message := fmt.Sprintf("%s", err)                               // 将捕获到的 panic 信息格式化为字符串，便于后续日志记录。
				log.Printf("%s\n\n", trace(message))                            // 将 panic 的堆栈信息打印到日志中。
				c.Fail(http.StatusInternalServerError, "Internal Server Error") // 向客户端返回一个通用的错误消息，避免暴露服务端的详细实现信息，增强安全性
			}
		}()

		c.Next()
	}
}
